1.List<T> collection
  ArrayList collection
  List has a unique data type while arraylist may store different types of objects.

2.Int to String
int.ToString()

3.if you want to initilize an array you need to defind the size of it, no matter one 1d or 2d, the same.

4.C# foreach syntax:
var fibNumbers = new List<int> { 0, 1, 1, 2, 3, 5, 8, 13 };
foreach (int element in fibNumbers)

5.C# stack
init:var stack = new Stack<Node>();
stack.Push --> push a new element to stack
stack.Pop() --> pops up the top element and remove it from the stack
stack.Peek() --> gives you the top element in the stack and do not remove it from the stack
stack.Count --> stack's counting number
stack.Clear() --> clean the whole stack.

6.C# string split
string s = "there is a cat";
string[] words = s.Split(' ');
        foreach (string word in words)
        {
            Console.WriteLine(word);
        }
        
output result:

there
is
a
cat

7. string property:
Property or indexer 'string.this[int]' cannot be assigned to -- it is read only
You can't assign a string's val by its index.

8. Operator	Description	Example

The Bitwise operators supported by C# are listed in the following table. Assume variable A holds 60 and variable B holds 13, then 
&	Binary AND Operator copies a bit to the result if it exists in both operands.	(A & B) = 12, which is 0000 1100
|	Binary OR Operator copies a bit if it exists in either operand.	(A | B) = 61, which is 0011 1101
^	Binary XOR Operator copies the bit if it is set in one operand but not both.	(A ^ B) = 49, which is 0011 0001
~	Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.	(~A ) = 61, which is 1100 0011 in 2's complement due to a signed binary number.
<<	Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.	A << 2 = 240, which is 1111 0000
>>	Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.	A >> 2 = 15, which is 0000 1111

9. The HashSet<T> data structure:

HashSet<T> is more or less modeled after a mathematical set, which means that:

It may contain no duplicate values.

Its elements are in no particular order; therefore the type does not implement the IList<T> interface, but the more basic ICollection<T>. As a consequence, elements inside a hash set cannot be randomly accessed through indices; they can only be iterated over through an enumerator.

Certain set functions such as Union, Intersection, IsSubsetOf, IsSupersetOf are available. These can come in handy when working with multiple sets.


Why not List<T>?

Since a HashSet<T> is simply a collection of unique objects, you might wonder why it has to be a data structure. A normal List<T> could have the same behavior by checking if an object is found in the list before adding it.

The short answer is speed. Searching through a normal List<T> gets very slow very fast as more elements are added. A HashSet<T> requires a structure design that will allow for fast searching and insertion speeds.

10. get the sum of all elements in List<int>
double total = myList.Sum();


11. remove the last element in a list 

rows.RemoveAt(rows.Count - 1);

12.
通过上面几节中的介绍和本节中的分析，我们可以总结出DataSet对象的三大特性：
（1） 独立性。DataSet独立于各种数据源。
（2） 离线（断开）和连接。
（3） DataSet对象是一个可以用XML形式表示的数据视图，是一种数据关系视图。

在实际应用中，DataSet使用方法一般有三种：
（1） 把数据库中的数据通过DataAdapter对象填充DataSet。
（2） 通过DataAdapter对象操作DataSet实现更新数据库。
（3） 把XML数据流或文本加载到DataSet

13.
什么是三层架构
三层架构就是把整个软件系统分为三个层次

表现层（Presentation layer）
业务逻辑层（Business Logic Layer）
数据访问层（Data access layer）

表现层（Presentation layer）：表现层可以说是距离用户最近的层，主要是用于接收用户输入的数据和显示处理后用户需要的数据。一般表现为界面，用户通过界面输入查询数据和得到需要的数据。
业务逻辑层（Business Logic Layer）：业务逻辑层是处于表现层和数据访问层之间，主要是从数据库中得到数据然后对数据进行逻辑处理。
数据访问层（Data access layer）：数据访问层是直接和数据库打交道的，对数据进行“增、删、改、查”等基本的操作。
不知道大家和我有没有同样的困惑：为什么中间要有业务逻辑层？为什么数据访问层不能对数据进行逻辑处理呢?少了中间一层不是减少了代码量吗？

我后来想了很久，查了很多资料，突然有所感悟，试着用自己语言描述下其中缘由。

用户对应为：食客；（食客通过服务员点单）
表现层对应为：服务员；（服务员负责食客的点单和上菜）
业务逻辑层对应为：主厨；（主厨从服务员那获得通知，向助手要原材料，并将原材料绘制成成品交给服务员）
数据访问层对应为：助手；（助手从主厨那获得通知，提交给主厨原材料）


小结一下：表现层的代码只是起到和用户交互的一个功能，采集信息反馈结果。

：业务逻辑层是通过数据访问层拿到存在数据库里的原始数据，然后再对数据进行逻辑上的处理，比如说验证。

：数据访问层的代码都是对数据库数据的“增删改查”，是原子性的不可以再细分的

：实体层不是三层架构中的任意一层，它起到一个贯穿三层架构的作用。在上述例子中Student的对象就贯穿了业务逻辑层和数据访问层。至于为什么要用一个类来贯穿三层架构，而不是直接用变量来连接，是因为有的时候变量可能会很多，如学生在后期可能要添加了“省份”，“学校”，“年级”，“班级”等等属性，那么就会很麻烦，但是面向对象编程的话，就可以很轻松地把属性封装在一个对象里，传递参数也方便。

14.依赖注入：

什么是依赖注入？
依赖注入，英文是Dependency Injection一般简称DI，是实现对象与其协作者或依赖关系之间松散耦合的技术。为了执行其操作，类所需的对象不是直接实例化协作者或使用静态引用，而是以某种方式提供给类。 大多数情况下，类将通过它们的构造函数来声明它们的依赖关系，允许它们遵循显式依赖原则。 这种方法被称为“构造方法注入”。

在设计时考虑到DI，它们更加松散耦合，因为他们没有直接的，硬编码的依赖于他们的合作者。 这遵循依赖性反转原则，其中指出“高级模块不应该依赖于低级模块;两者都应该取决于抽象”。 除了引用特定的实现之外，类请求构造类时提供给它们的抽象（通常是接口）。 将依赖关系提取到接口中并将这些接口的实现提供为参数也是策略设计模式的一个示例。

当系统被设计为使用DI时，有许多类通过它们的构造方法（或属性）请求它们的依赖关系，有一个专门用于创建这些类及其关联的依赖关系的类是有帮助的。 这些类被称为容器，或更具体地称为控制反转（IoC）容器或依赖注入（DI）容器。 容器本质上是一个工厂，负责提供从它请求的类型的实例。 如果给定类型已声明它具有依赖关系，并且容器已配置为提供依赖关系类型，那么它将创建依赖关系作为创建请求的实例的一部分。 以这种方式，可以将复杂的依赖关系图提供给类，而不需要任何硬编码的对象构造。 除了创建具有依赖关系的对象之外，容器通常会在应用程序中管理对象生命周期。

ASP.NET Core包括一个简单的内置容器（由IServiceProvider接口表示），默认情况下支持构造函数注入，ASP.NET通过DI可以提供某些服务。 ASP.NET的容器是指它作为服务管理的类型。 在本文的其余部分中，服务将引用由ASP.NET Core的IoC容器管理的类型。 您可以在应用程序的Startup类中的ConfigureServices方法中配置内置容器的服务。

本文介绍依赖注入，因为它适用于所有ASP.NET应用程序。 依赖注入和控制器涵盖MVC控制器内的依赖注入。

1. 构造器注入
构造器注入要求所讨论的构造方法是公开的。 否则，你的应用程序会抛出InvalidOperationException

不能找到类型“xxx”的合适的构造函数。 确保类型是具体的，服务是为公共构造函数的所有参数注册的。

构造器注入需要只存在一个适用的构造函数。 支持构造函数重载，但只有一个重载可以存在，其参数都可以通过依赖注入来实现。 如果有多个存在，您的应用程序将抛出一个InvalidOperationException

接受所有给定参数类型的多个构造函数已在类型'xxxx'中找到。 应该只有一个适用的构造函数。

构造方法可以接受非依赖注入提供的参数，但这些参数必须支持默认值。 例如：

// throws InvalidOperationException: Unable to resolve service for type 'System.String'...
public CharactersController(ICharacterRepository characterRepository, string title)
{
    _characterRepository = characterRepository;
    _title = title;
}

// runs without error
public CharactersController(ICharacterRepository characterRepository, string title = "Characters")
{
    _characterRepository = characterRepository;
    _title = title;
}

2.注册自己的服务
您可以注册自己的应用程序服务，如下所示。 第一个通用类型表示将从容器请求的类型（通常为接口）。 第二个通用类型表示将由容器实例化并用于实现这种请求的具体类型。

services.AddTransient<IEmailSender, AuthMessageSender>();
services.AddTransient<ISmsSender, AuthMessageSender>();
每个services.Add<ServiceName>扩展方法添加（并可能配置）服务。 例如，services.AddMvc()添加了MVC需要的服务。 建议您遵循此约定，将扩展方法放在Microsoft.Extensions.DependencyInjection命名空间中，以封装服务注册组。

AddTransient方法用于将抽象类型映射到为需要的每个对象单独实例化的具体服务。 这被称为服务的生命周期，其余的生命周期选项如下所述。 为您注册的每个服务选择适当的生命周期很重要。 应该向请求它的每个类提供一个新的服务实例？ 在一个给定的Web请求中应该使用一个实例吗？ 还是应该在应用程序的一生中使用单个实例？

3.服务的声明周期和注册选项
ASP.NET服务可以配置以下生命周期：

Transient

每次请求时创建。 最好用于轻量级无状态服务。

Scoped

每次请求时创建，贯穿整个请求。

Singleton

Singleton生命周期服务是在第一次请求时创建的（或者当你在指定实例时运行ConfigureServices时），然后每个后续请求都将使用相同的实例。 如果您的应用程序需要单例行为，则允许服务容器管理服务的生命周期，而不是实现单例设计模式，并且自己管理对象的生命周期。

服务可以通过几种方式向容器注册。 我们已经看到如何通过指定要使用的具体类型来注册具有给定类型的服务实现。 此外，还可以指定一个工厂，然后根据需要用于创建实例。 第三种方法是直接指定要使用的类型的实例，在这种情况下，容器将永远不会尝试创建一个实例（也不会处理实例）。


Re: Why can't I use [FromBody] in HttpGet?
Dec 27, 2017 09:34 PM|LINK

A Get does not send the body of the form, it only requests a URL.  Use a <form> in your view and post it to your controller method, which needs to be decorated with HttpPost.



: this()

: this(...)

This syntax allows you to call one constructor with a different signature from another within the same class. It is never mandatory to do this, but can sometimes be useful.

An example of when it can be useful is for reusing common code in the constructors. For example in C# 3.5 or before you may want to simulate optional parameters on a constructor:

Foo(int x, int y)
{
     this.x = x;
     this.y = y;
}

Foo(int x) : this(x, 10) {}  // y defaults to 10
With C# 4.0 optional parameters are now available which reduces the need for this approach.

An alternative way to reuse code in constructors is to factor it out into a static function which is called from each constructor that wishes to use it.


自行理解的datatransfer object：
 也就是说，从前端出来的数据很有可能是不符合数据库要求的，而在这个时候，我们只要先吧vm里的东西塞到一个dto里面，然后再用这个dto进行与底层class的交互，这样看起来更加clear一些。
 
 Type	Range	Size
sbyte	-128 to 127	Signed 8-bit integer
byte	0 to 255	Unsigned 8-bit integer
char	U+0000 to U+ffff	Unicode 16-bit character
short	-32,768 to 32,767	Signed 16-bit integer
ushort	0 to 65,535	Unsigned 16-bit integer
int	-2,147,483,648 to 2,147,483,647	Signed 32-bit integer
uint	0 to 4,294,967,295	Unsigned 32-bit integer
long	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	Signed 64-bit integer
ulong	0 to 18,446,744,073,709,551,615	Unsigned 64-bit integer
 
