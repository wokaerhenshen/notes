I will write some notes of react in this part。

1.引入：
<script src="https://cdn.staticfile.org/react/16.4.0/umd/react.development.js"></script>
<script src="https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js"></script>
<script src="https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js"></script>

ReactDOM.render() 指令
可以这么使用ReactDOM.render(
	<h1>Hello, world!</h1>,
	document.getElementById('example')
);
就直接在id为example上附上元su 

<script type="text/babel"> 

2.元素熏染：

更新元素渲染
React 元素都是不可变的。当元素被创建之后，你是无法改变其内容或属性的。

目前更新界面的唯一办法是创建一个新的元素，然后将它传入 ReactDOM.render() 方法

React 只会更新必要的部分

值得注意的是 React DOM 首先会比较元素内容先后的不同，而在渲染过程中只会更新改变了的部分。

有一些syntax我就没有记录。

3.React JSX
React 使用 JSX 来替代常规的 JavaScript。

JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。

我们不需要一定使用 JSX，但它有以下优点：

JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。
它是类型安全的，在编译过程中就能发现错误。
使用 JSX 编写模板更加简单快速。

4.组件
1、我们可以使用函数定义了一个组件：

function HelloMessage(props) {
    return <h1>Hello World!</h1>;
}
你也可以使用 ES6 class 来定义一个组件:

class Welcome extends React.Component {
  render() {
    return <h1>Hello World!</h1>;
  }
}




复合组件
我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。

以下实例我们实现了输出网站名字和网址的组件：

React 实例
function Name(props) {
    return <h1>网站名称：{props.name}</h1>;
}
function Url(props) {
    return <h1>网站地址：{props.url}</h1>;
}
function Nickname(props) {
    return <h1>网站小名：{props.nickname}</h1>;
}
function App() {
    return (
    <div>
        <Name name="菜鸟教程" />
        <Url url="http://www.runoob.com" />
        <Nickname nickname="Runoob" />
    </div>
    );
}
 
ReactDOM.render(
     <App />,
    document.getElementById('example')
);

5.react 状态
React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。

React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。

将生命周期方法添加到类中
在具有许多组件的应用程序中，在销毁时释放组件所占用的资源非常重要。

每当 Clock 组件第一次加载到 DOM 中的时候，我们都想生成定时器，这在 React 中被称为挂载。

同样，每当 Clock 生成的这个 DOM 被移除的时候，我们也会想要清除定时器，这在 React 中被称为卸载

componentDidMount()
componentWillUnmount()

6. react 事件处理：
	React 点击事件的 bind(this) 如何传参?

	需要通过 bind 方法来绑定参数，第一个参数指向 this,第二个参数开始才是事件函数接收到的参数:

	<button onClick={this.handleClick.bind(this, props0, props1, ...}></button>

	handleClick(porps0, props1, ..., event) {
	    // your code here
	}
	事件：this.handleclick.bind(this，要传的参数)

	函数：handleclick(传过来的参数，event)

	从 render 中传递参数到 外部函数 one():

	class Ex extends React.Component{

	....  this.state={name:'Stupid Dog'};

	... ... ...

	function one(para){
	    console.log('parameter in one Func',para);
	}

	... ... ...

	render(){    
	    var mm='AABB';
	    return (<div><button onClick={this.one.bind(this,mm)}> test</button>
	    <button onClick={this.one.bind(this,this.state.name)}> test</button></div>);

	}}
	
	理解 React 中 es6 创建组件 this 的方法

在JavaScript中，this对象是运行时基于函数的执行环境（也就是上下文）绑定的。

	从 react 中的 demo 说起
	Facebook最近一次更新react时，将es6中的class加入了组件的创建方式当中。Facebook也推荐组件创建使用通过定义一个继承自 React.Component 的class来定义一个组件类。官方的demo：

	class LikeButton extends React.Component {
	  constructor() {
	    super();
	    this.state = {
	      liked: false
	    };
	    this.handleClick = this.handleClick.bind(this);
	  }
	  handleClick() {
	    this.setState({liked: !this.state.liked});
	  }
	  render() {
	    const text = this.state.liked ? 'liked' : 'haven\'t liked';
	    return (
	      <div onClick={this.handleClick}>
		You {text} this. Click to toggle.
	      </div>
	    );
	  }
	}
	ReactDOM.render(
	  <LikeButton />,
	  document.getElementById('example')
	);
	上面的demo中有大量this的使用，在 class LikeButton extends React.Component 中我们是声明该class，因为this具体是由其上下文决定的，因此在类定义中我们无法得知this用法。 相当于是new了上面定义的类，首先调用 constructor() 函数， this.state 的this上下文就是该实例对象；同理，render() 函数中 this.state.liked 的this上下文也是该对象。问题在于 onClick={this.handleClick} ，获取该函数引用是没有问题，这里的this上下文就是该对象。

	这时问题来了，在原来 React.createClass 中， handleClick() 在onClick事件触发的时候，会自动绑定到LikeButton实例上，这时候该函数的this的上下文就是该实例。不过在ES6的class的写法中，Facebook取消了自动绑定，实例化LikeButton后，handleClick()的上下文是div的支撑实例（ backing instance ），而 handleClick() 原本要绑定的上下文是LikeButton的实例。对于该问题，我们有多种解决方案。

	使用 bind() 函数改变 this 的上下文
	可以在class声明中的constructor()函数中，使用：

	this.handleClick = this.handleClick.bind(this);
	该方法是一个bind()绑定，多次使用。在该方法中，我们在声明该实例后，可以在该实例任何地方使用 handleClick() 函数，并且该 handleClick() 函数的this的上下文都是LikeButton实例对象。

	除此我们也可以在具体使用该函数的地方绑定this的上下文到LikeButton实例对象，代码如下：

	<div onClick={this.handleClick.bind(this)}>
	  You {text} this. Click to toggle.
	</div>
	这种方法需要我们每次使用bind()函数绑定到组件对象上。

	es6的箭头函数
	es6中新加入了箭头函数=>，箭头函数除了方便之外还有而一个特征就是将函数的this绑定到其定义时所在的上下文。这个特征也可以帮助我们解决这个问题。使用如下代码：

	<div onClick={() => this.handleClick()}>
	  You {text} this. Click to toggle.
	</div>
	这样该 this.handleClick() 的上下文就会被绑定到 LikeButton 的实例对象上。个人认为，使用箭头函数使得 JavaScript 更加接近面向对象的编程风格。

	this 的总结
	this 的本质就是：this跟作用域无关的，只跟执行上下文有关。
	
	
	
7.条件渲染：
	通过条件渲染页面：

	首先建一个函数，来根据不同的情况返回不同的值，然后建一个类组建，先进行变量的初始化，对变量进行操作，在组件内进行小的渲染，最后通过 ReactDOM.render() 渲染到页面上。

	为什么要进行变量的初始化？

	一个软件所分配到的空间中极可能存在着以前其他软件使用过后的残留数据，这些数据被称之为垃圾数据。所以通常情况下我们为一个变量，为一个数组，分配好存储空间之后都要对该内存空间初始化。

	简单来说就是清理残留数据。
8.register service worker
如果断网了，再用浏览器加载页面依旧能够加载出来，因为该module将网页存在了浏览器里面。
PWA progressive web application

跟manifest.json相关，该json里面的内容就是与缓存相关的。

9.fragment 占位符，如果你render最外面不想是一个div的话，就用fragment把其他元素包起来。fragment不会显示到html里面，等于说最外面并没有东西把他包着。


10. saga：

是个midddleware，在reducer之前执行，用来处理复杂的async call，
写的时候要：
function*

 yield...
 
 这种，跟C# async await 蛮像的
 
 takeEvery() 就是一个listener，用来监听action何时被call了
 
 11. react life cycle:
 UNSAFE_componentWillMount()
UNSAFE_componentWillMount()
UNSAFE_componentWillMount() is invoked just before mounting occurs. It is called before render(), therefore calling setState() synchronously in this method will not trigger an extra rendering. Generally, we recommend using the constructor() instead for initializing state.

Avoid introducing any side-effects or subscriptions in this method. For those use cases, use componentDidMount() instead.

This is the only lifecycle method called on server rendering.

12. 与11有点相似：
Mount
When React creates an instance of a component and inserts it into the DOM (mounting), the following methods are called:

constructor()
componentWillMount()
render()
componentDidMount()

13. 还是lifecycle里的事情：
componentWillReceiveProps
Our component was doing just fine, when all of a sudden a stream of new props arrive to mess things up.

Perhaps some data that was loaded in by a parent component’s componentDidMount finally arrived, and is being passed down.

Before our component does anything with the new props, componentWillReceiveProps is called, with the next props as the argument.


We are now in a fun place, where we have access to both the next props (via nextProps), and our current props (via this.props).

14.
import React, { Component } from 'react';
import { Provider, connect } from 'react-redux';

class ProtectedRoute extends Component {
    render() {
      const { component: Component, ...props } = this.props
  
      return (
        <Route 
          {...props} 
          render={props => (
            this.props.isMedical && 
              <Component {...props} /> 
          )} 
        />
      )
    }
  }

  function mapStateToProps(state) {
    return {
      isMedical: state.common.applicationSettings.isMedical
    };
  }



export default connect(mapStateToProps)(ProtectedRoute);

15.

注：上面两段代码你可能会想，为什么 Func 和 Class 都能实现一个组件，他们有什么差别吗？
其实你在开发时不容易感觉到差别，但 React 本身是进行了很多差别处理，如果是 Class 类，React 会用 new 关键字实例化，然后调用该实例的 render 方法，如果是 Func 函数，React 会直接调用它。

